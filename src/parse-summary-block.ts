import { CoordRequest } from './types'
import { coordFilter } from './util'

export function parseSummaryBlock(
  b: Uint8Array,
  startOffset: number,
  request?: CoordRequest,
) {
  const features = [] as any[]
  let offset = startOffset

  const dataView = new DataView(b.buffer, b.byteOffset, b.length)
  while (offset < b.byteLength) {
    // this was extracted from looking at the runtime code generated by
    // binary-parser
    const chromId = dataView.getUint32(offset, true)
    offset += 4
    const start = dataView.getUint32(offset, true)
    offset += 4
    const end = dataView.getUint32(offset, true)
    offset += 4
    const validCnt = dataView.getUint32(offset, true)
    offset += 4
    const minScore = dataView.getFloat32(offset, true)
    offset += 4
    const maxScore = dataView.getFloat32(offset, true)
    offset += 4
    const sumData = dataView.getFloat32(offset, true)
    offset += 4
    // unused
    // const sumSqData = dataView.getFloat32(offset, true)
    offset += 4

    features.push({
      start,
      end,
      maxScore,
      minScore,
      summary: true,
      score: sumData / (validCnt || 1),
    })
  }

  return features
}
